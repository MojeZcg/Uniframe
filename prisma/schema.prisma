// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model products {
  product_id          Int                 @id @default(autoincrement())
  product_name        String              @db.VarChar(100)
  product_price       Decimal             @db.Decimal(10, 2)
  product_images      String              @db.Text
  product_availables  Int                 @default(0)
  product_description String              @db.VarChar(300)
  product_view_count  Int                 @default(0)
  product_created_at  DateTime            @default(now()) @db.Timestamp(0)
  product_purchases   product_purchases[]
  product_materials   product_materials[]
}

model users {
  user_id           Int                 @id @default(autoincrement())
  user_email        String              @unique @db.VarChar(70)
  user_name         String              @db.VarChar(60)
  user_phone        String              @unique @db.VarChar(20)
  product_purchases product_purchases[]
}

model payment_methods {
  method_id         Int                 @id @default(autoincrement())
  method_name       String              @unique @db.VarChar(60)
  product_purchases product_purchases[]
}

model product_purchases {
  purchase_id          Int             @id @default(autoincrement())
  buyer_user           Int
  product_sold         Int
  amount_sold          Decimal         @db.Decimal(10, 2)
  quantity_of_product  Int
  pay_method           String          @db.VarChar(70)
  transaction_datetime DateTime        @default(now()) @db.Timestamp(0)
  users                users           @relation(fields: [buyer_user], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  products             products        @relation(fields: [product_sold], references: [product_id], onDelete: NoAction, onUpdate: NoAction)
  payment_methods      payment_methods @relation(fields: [pay_method], references: [method_name], onDelete: NoAction, onUpdate: NoAction)

  @@index([buyer_user])
  @@index([pay_method])
  @@index([product_sold])
}

model materials {
  material_id       Int                 @id @default(autoincrement())
  material_slug     String              @db.VarChar(70)
  material_name     String              @db.VarChar(70)
  product_materials product_materials[]
}

model product_materials {
  product_id  Int
  material_id Int
  products    products  @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  materials   materials @relation(fields: [material_id], references: [material_id], onDelete: Cascade)

  @@id([product_id, material_id])
}
